{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","catgs","type","value","onChange","target","propType","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","i","ReactDOM","render","document","getElementById"],"mappings":"mNAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAmB5C,OACI,mCACI,sBAAMC,SAbO,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAK,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,OAQd,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SArBU,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,eA4B/BZ,EAAYe,SAAW,CACnBd,c,OAAee,EAAUC,KAAKC,Y,mCCrCrBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCEPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAChC,OACI,sBAAKc,UAAU,yEAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDX,SAACA,GAAa,IAAD,EACXlB,mBAAS,CAC/ByB,KAAM,GACNa,SAAS,IAHwB,mBAC9BC,EAD8B,KACvBC,EADuB,KAuBrC,OAjBAC,qBAAW,WAEPxB,EAAQC,GACHwB,MAAM,SAAAC,GAEHC,YAAY,WACRJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAGd,UAIb,CAACpB,IAEIqB,EDpBwBM,CAAa3B,GAAhCa,EAFuB,EAE5BN,KAAaa,EAFe,EAEfA,QAEpB,OACI,qCACI,qBAAIJ,UAAU,oEAAd,cAAqFhB,EAArF,OAGCoB,GAAW,mBAAGJ,UAAU,qEAAb,qBACX,qBAAKA,UAAU,YAAf,SAEOH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEdxBiB,EAAe,WAAO,IAAD,EAGM9C,mBAAS,CAAC,gBAHhB,mBAGvB+C,EAHuB,KAGXhD,EAHW,KAY9B,OACI,qCACI,gDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEQgD,EAAWpB,KAAI,SAACT,EAAU8B,GAAX,OACX,cAAC,EAAD,CAEI9B,SAAYA,GADLA,YCnBnC+B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.d5728dbf.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    \r\n    const handleInputChange = (e) =>{\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 2){\r\n            setCategories(catgs => [inputValue, ...catgs]);\r\n            setInputValue(' ');\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={inputValue}\r\n                    onChange={handleInputChange}\r\n                />\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nAddCategory.propType = { //addCategory requiere el setCategory --- es una regla\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async (category) => { //peticion http para traer las imágenes que corresponden a la categoría\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=g1uWPWbmIHlnfgWBMNhoVGudBNa4GOzU`;\r\n    const resp = await fetch (url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map( img => { //gifs barrerá cada una de las imagenes de data\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url, //signo de interrogación para preguntar si vienen las imagenes que la use\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce animate__fadeIn animate__faster\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data:images, loading} = useFetchGifs(category); //a data se le cambio el nombre de images\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__bounce animate__fadeIn animate__faster\"> { category } </h3>\r\n\r\n            {/*loading ? <p>Loading</p> : null          --> operador ternario if?{loading} else {null}  */}\r\n            {loading && <p className=\"animate__animated animate__bounce animate__flash animate__repeat-3\">Loading</p> /* si loading es true, muestra el parrafo*/}\r\n            {<div className=\"card-grid\">\r\n                {\r\n                    images.map( img =>(\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>}\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport {getGifs} from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) =>{\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => { //los efectos nunca pueden ser async\r\n\r\n        getGifs(category) //promesa\r\n            .then( imgs => {\r\n\r\n                setTimeout( () => {\r\n                    setState({ //manda info igual que como se maneja en el state\r\n                        data: imgs,\r\n                        loading: false\r\n                    });\r\n\r\n                }, 800);\r\n                \r\n            })\r\n        \r\n    },[category])\r\n\r\n    return state; //{ data : [] , loading : true };\r\n}","import React, {useState} from 'react';\r\nimport {AddCategory} from './components/AddCategory';\r\nimport {GifGrid} from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n\r\n    const [categories, setCategories] = useState(['Dragon Ball']);\r\n\r\n//    const handleAdd = () => {\r\n//        //setCategories([...categories, 'HunterXHunter']); //[...categories] obtiene los objetos del arreglo y se añade otra\r\n//        setCategories( catgs => [...catgs, 'HunterXHunter']);\r\n//    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2>Gif Expert App</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n            <ol>\r\n                {\r\n                    categories.map((category, i) =>\r\n                        <GifGrid \r\n                            key = {category}\r\n                            category = {category}\r\n                        />\r\n                    )\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport {GifExpertApp} from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}